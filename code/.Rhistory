bad_gene_name <- c(bad_gene_name[-good_gene_exchange_index],add_value)
bad_gene_name <- unique(bad_gene_name)
gene_index <- Getgene_index(bad_gene_name)
badbicluster$`gene index` <- gene_index
badbicluster$`gene names` <- bad_gene_name
return(badbicluster)
}
else{
remove_index <- sample(1:length(bad_gene_name),k)
bad_gene_name <- c(bad_gene_name[-remove_index],add_value)
bad_gene_name <- unique(bad_gene_name)
gene_index <- Getgene_index(bad_gene_name)
badbicluster$`gene index` <- gene_index
badbicluster$`gene names` <- bad_gene_name
return(badbicluster)
}
}
}
GABiclustering_cell_exchange <- function(badbicluster = B[[2]], goodbicluster = B){
samp <- sample(length(goodbicluster),1)
goodbicluster <- goodbicluster[[samp]]
good_cell_index <- goodbicluster$`cell index`
bad_cell_index <- badbicluster$`cell index`
k <- 0
while (k == 0) {
k <- min(rpois(1, lambda = 1), min(nrow(good_cell_index), nrow(bad_cell_index)))
}
if(length(bad_cell_index) <= 3*k | length(good_cell_index) <= 3*k){
badbicluster <- GABiclustering_mutation(badbicluster)
return(badbicluster)
}
else{
good_cell_exchange_index <- sample(1:length(good_cell_index),k)
add_value <- good_cell_index[good_cell_exchange_index]
if(length(bad_cell_index) >= max(good_cell_exchange_index)){
bad_cell_index <- c(bad_cell_index[-good_cell_exchange_index],add_value)
bad_cell_index <- unique(bad_cell_index)
cell_names <- CELL[bad_cell_index]
badbicluster$`cell index` <- bad_cell_index
badbicluster$`cell names` <- cell_names
return(badbicluster)
}
else{
remove_index <- sample(1:length(bad_cell_index),k)
bad_cell_index <- c(bad_cell_index[-remove_index],add_value)
bad_cell_index <- unique(bad_cell_index)
cell_names <- CELL[bad_cell_index]
badbicluster$`cell index` <- bad_cell_index
badbicluster$`cell names` <- cell_names
return(badbicluster)
}
}
}
GABiclustering_crossover <- function(badbicluster = B[[2]], goodbicluster = B){
if(runif(1)>=0.5){
badbicluster <- GABiclustering_cell_exchange(badbicluster, goodbicluster)
}
else{
badbicluster <- GABiclustering_gene_exchange(badbicluster, goodbicluster)
}
badbicluster <- check_express(badbicluster)
return(badbicluster)
}
View(GABiclustering)
GABiclustering <-function(max_iteration = 1000, N = 100, m = 4, n = 9, alpha = 1,
lambda = 1, beta = 1, delta = 0.1, good_num = 20,
All_gene_index = All_gene_index, All_cell_index = All_cell_index,
Biclustering_num = Biclustering_num,
continue = 0, seed = 2021){
set.seed(seed)
same_times <- 0
mid_num <- ceiling((N-good_num)/2)
save_names <- paste('B_',alpha,'_',lambda,'_',beta,'_',seed,'_',delta,'_',Biclustering_num,'.Rdata',sep = '')
if(continue == 0){
B <- GABiclustering_initialize(N, m, n)
}
# else{
#   load(save_names)
# }
output_names <- paste('output_',alpha,'_',lambda,'_',beta,'_',seed,'_',delta,'_',Biclustering_num,'.txt',sep = '')
fitness_old <- GABiclustering_fitness(B, alpha, lambda, beta, delta, All_gene_index, All_cell_index)
sink(output_names)
cat('Initial Score:',fitness_old$s_ordered[1:5],'\n')
for(i in 1:max_iteration){
fitness_old <- GABiclustering_fitness(B, alpha, lambda, beta, delta, All_gene_index, All_cell_index)
best_index_old <- fitness_old$s_ordered_index[1]
good_index_old <- fitness_old$s_ordered_index[1:good_num]
nice_index_old <- fitness_old$s_ordered_index[1:5]
mid_index <- fitness_old$s_ordered_index[(good_num+1):(good_num+mid_num)]
bad_index <- fitness_old$s_ordered_index[(good_num+mid_num+1):N]
good_b_old <- B[good_index_old]
mid_b_old <- B[mid_index]
bad_b_old <- B[bad_index]
nice_b_old <- B[nice_index_old]
good_m_new <- lapply(good_b_old,GABiclustering_mutation)
mid_m_new <- lapply(mid_b_old,GABiclustering_mutation)
bad_m_new <- lapply(bad_b_old,GABiclustering_mutation)
good_c_new <- lapply(good_b_old,GABiclustering_crossover,goodbicluster = good_b_old)
mid_c_new <- lapply(mid_b_old,GABiclustering_crossover,goodbicluster = good_b_old)
bad_c_new <- lapply(bad_b_old,GABiclustering_crossover,goodbicluster = good_b_old)
B_new <- c(B,good_m_new,mid_m_new,bad_m_new,good_c_new,mid_c_new,bad_c_new)
B_new <- unique(B_new)
fitness_new <- GABiclustering_fitness(B_new, alpha, lambda, beta, delta, All_gene_index, All_cell_index)
new_index <- fitness_new$s_ordered_index[1:N]
B <- B_new[new_index]
fitness_new <- GABiclustering_fitness(B, alpha, lambda, beta, delta, All_gene_index, All_cell_index)
nice_index_new <- fitness_new$s_ordered_index[1:5]
nice_b_new <- B[nice_index_new]
if(identical(nice_b_old, nice_b_new)){
same_times <- same_times+1
}
else{ same_times <- 0 }
if(same_times == 1){
print('Local maximum reached.')
sink()
return(B)
}
best_index_new <- fitness_new$s_ordered_index[1]
if(i %% 1 == 0){
best_index <- fitness_new$s_ordered_index[1]
cat('iteration:',i,'\n')
cat('Score:',fitness_new$s_ordered[1:5],'\n')
cat('Gene Corr Score:',fitness_new$c_ordered[1:5],'\n')
cat('Cell Dist Score:',fitness_new$d_ordered[1:5],'\n')
cat('Area Score:',fitness_new$a_ordered[1:5],'\n')
cat('Penalty:',fitness_new$o_ordered[1:5],'\n')
cat('best gene index:',B[[best_index]]$`gene index`,'\n')
cat('best gene names:',B[[best_index]]$`gene names`,'\n')
cat('best cell index:',B[[best_index]]$`cell index`,'\n')
cat('best cell names:',B[[best_index]]$`cell names`,'\n')
}
save(B, file = save_names)
}
print('Maximum number of iterations reached.')
return(B)
sink()
}
View(GABiclustering)
ALL_B <- FindAllBiclusterings(Biclustering_num = 2, start = 1, delta = delta, All_gene_index = All_gene_index, All_cell_index = All_cell_index)
View(GABiclustering)
View(GABiclustering)
View(GABiclustering_cell_add)
View(FindAllBiclusterings)
View(FindAllBiclusterings)
FindAllBiclusterings <- function(Biclustering_num = 2, start = 1, delta = delta,
All_gene_index = All_gene_index, All_cell_index = All_cell_index){
# All_B <- vector('list', 1)
# All_B[[1]] <- B
#
while(start == 1){
seed <- sample(1:1000,1)
GAbiclustering_all_result <- GABiclustering(max_iteration = 1000, N = 100, m = 10, n = 15, alpha = alpha,
lambda = lambda, beta = beta, delta = delta, good_num = 20,
All_gene_index = All_gene_index, All_cell_index = All_cell_index,
Biclustering_num = Biclustering_num,
continue = 0, seed = seed)
B <- GAbiclustering_all_result[[1]]
gene_index <- B[[1]]
cell_index <- B[[3]]
Cell_names <- B$`cell names`
if(Biclustering_num <= 30){
All_gene_index <- c(All_gene_index, gene_index)
All_gene_index <- unique(All_gene_index)
All_cell_index <- c(All_cell_index, cell_index)
All_cell_index <- unique(All_cell_index)
All_B[[Biclustering_num]] <- B
All_gene_index <- sort(All_gene_index)
All_cell_index <- sort(All_cell_index)
save(All_gene_index,file=paste('All_gene_index_',alpha,'_',lambda,'_',beta,'_',seed,
'_',delta,'_',Biclustering_num,'.Rdata',sep = ''))
save(All_cell_index,file=paste('All_cell_index_',alpha,'_',lambda,'_',beta,'_',seed,
'_',delta,'_',Biclustering_num,'.Rdata',sep = ''))
save(All_B,file=paste('All_B_',alpha,'_',lambda,'_',beta,'_',seed,
'_',delta,'.Rdata',sep = ''))
g_length <- length(gene_index)
c_length <- length(Cell_names)
bicluster_expressed <- Data_3[sort(gene_index), which(colnames(Data_3) %in% Cell_names)]
filename <- paste('express_',alpha,'_',lambda,'_',beta,'_',seed,'_',delta,'_',Biclustering_num,'.png',sep = '')
if(sum(bicluster_expressed) !=  g_length * c_length){
pheatmap(bicluster_expressed, cluster_rows = F, cluster_cols = F, color = colorName, legend = F,
filename = filename)
}
else{
pheatmap(bicluster_expressed, legend = F, cluster_rows = F, cluster_cols = F, color = colorName[2], breaks = 1,
filename = filename)
}
Biclustering_num <- Biclustering_num + 1
}
else{
start = 0
}
}
}
View(FindAllBiclusterings)
ALL_B <- FindAllBiclusterings(Biclustering_num = 2, start = 1, delta = delta, All_gene_index = All_gene_index, All_cell_index = All_cell_index)
save.image("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FastFindALLBiclusterings_all.RData")
View(GABiclustering)
View(FindAllBiclusterings)
View(GABiclustering_initialize)
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/workspace_fate_simulation_new.RData")
View(Data_3)
View(Data_3_simulation)
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FindALLBiclusterings_sim.RData")
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/workspace_fate_simulation_new.RData")
Data_3[g,]
Data_3[g,]
c(rep(1,5),rep(2,5))
c(rep(c(1,2),5))
c(rep(3,5),rep(4,5))
c(rep(c(1,2),5))
al<-c[0.57, 0.58, 0.59]
la<-c[0.24,0.25,0.26]
al_len<-length(al)
la_len<-length(la)
al<-c[0.57, 0.58, 0.59]
al<-c[0.57, 0.58, 0.59]
al<-c(0.57, 0.58, 0.59)
al
la<-c(0.24,0.25,0.26)
la<-c(0.24,0.25,0.26)
al_len<-length(al)
alpha <- rep(al,each=la_len*10)
la_len<-length(la)
alpha <- rep(al,each=la_len*10)
al_len=length(al)
alpha
alpha <- rep(al,each=3*10)
alpha <- rep(al,each=30)
alpha <- rep(al,each=10)
alpha
lambda
lambda <- rep(rep(la,each=10),al_len))
alpha <- rep(la,each=la_len*10)
lambda <- rep(rep(la,each=10),al_len)
seed_ini <-rep(1:10,al_len*la_len)
a=c[al,la,seed_ini]
a=c(al,la,seed_ini)
View(a)
alpha <- rep(al,each=la_len*10)
View(alpha)
alpha
lambda
seed_ini
al<-c(0.57, 0.58, 0.59)
la<-c(0.24,0.25,0.26)
al_len=length(al)
la_len=length(la)
alpha <- rep(al,each=la_len*5)
lambda <- rep(rep(la,each=5),al_len)
seed_ini <-rep(1:5,al_len*la_len)
al<-c(0.57, 0.58, 0.59)
la<-c(0.24,0.25,0.26)
al_len=length(al)
la_len=length(la)
alpha <- rep(al,each=la_len*10)
lambda <- rep(rep(la,each=5),al_len)
seed_ini <-rep(1:10,al_len*la_len)
al<-c(0.57, 0.58, 0.59)
la<-c(0.24,0.25,0.26)
al_len=length(al)
la_len=length(la)
alpha <- rep(al,each=la_len*5)
lambda <- rep(rep(la,each=5),al_len)
seed_ini <-rep(1:5,al_len*la_len)
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/workspace_new.RData")
rm(all_corr)
rm(all_pvalue)
save.image("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/workspace_new.RData")
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/workspace_new.RData")
GAbiclustering_result <- GABiclustering(max_iteration = 1000, N = 100, m = 10, n = 15, alpha = alpha[i],
lambda = lambda[i], beta = 1, good_num = 20, seed = 2021)
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/all_corr.Rdata")
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/all_pvalue.Rdata")
GAbiclustering_result <- GABiclustering(max_iteration = 1000, N = 100, m = 10, n = 15, alpha = 0.58, lambda = 0.25, beta = 1, good_num = 20, seed = 2021)
View(GABiclustering_cell_exchange)
View(GABiclustering_gene_exchange)
GABiclustering_gene_exchange <- function(badbicluster = B[[2]], goodbicluster = B){
samp <- sample(length(goodbicluster),1)
goodbicluster <- goodbicluster[[samp]]
good_gene_name <- goodbicluster$`gene names`
bad_gene_name <- badbicluster$`gene names`
k <- 0
while (k == 0) {
k <- min(rpois(1, lambda = 1), min(nrow(good_gene_name), nrow(bad_gene_name)))
}
if(length(bad_gene_name) <= 3*k | length(good_gene_name) <= 3*k){
badbicluster <- GABiclustering_mutation(badbicluster)
return(badbicluster)
}
else{
good_gene_exchange_index <- sample(1:length(good_gene_name), k)
add_value <- good_gene_name[good_gene_exchange_index]
if(length(bad_gene_name) >= max(good_gene_exchange_index)){
bad_gene_name <- c(bad_gene_name[-good_gene_exchange_index],add_value)
bad_gene_name <- unique(bad_gene_name)
gene_index <- Getgene_index(bad_gene_name)
badbicluster$`gene index` <- gene_index
badbicluster$`gene names` <- bad_gene_name
return(badbicluster)
}
else{
remove_index <- sample(1:length(bad_gene_name),k)
bad_gene_name <- c(bad_gene_name[-remove_index],add_value)
bad_gene_name <- unique(bad_gene_name)
gene_index <- Getgene_index(bad_gene_name)
badbicluster$`gene index` <- gene_index
badbicluster$`gene names` <- bad_gene_name
return(badbicluster)
}
}
}
GAbiclustering_result <- GABiclustering(max_iteration = 1000, N = 100, m = 10, n = 15, alpha = 0.58, lambda = 0.25, beta = 1, good_num = 20, seed = 2021)
save.image("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/workspace_new.RData")
library(DOSE)
rm(all_corr)
rm(all_pvalue)
save.image("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/workspace_new.RData")
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FindALLBiclusterings_all.RData")
View(GABiclustering_gene_exchange)
GABiclustering_gene_exchange <- function(badbicluster = B[[2]], goodbicluster = B){
samp <- sample(length(goodbicluster),1)
goodbicluster <- goodbicluster[[samp]]
good_gene_name <- goodbicluster$`gene names`
bad_gene_name <- badbicluster$`gene names`
k <- 0
while (k == 0) {
k <- min(rpois(1, lambda = 1), min(nrow(good_gene_name), nrow(bad_gene_name)))
}
if(length(bad_gene_name) <= 3*k | length(good_gene_name) <= 3*k){
badbicluster <- GABiclustering_mutation(badbicluster)
return(badbicluster)
}
else{
good_gene_exchange_index <- sample(1:length(good_gene_name), k)
add_value <- good_gene_name[good_gene_exchange_index]
if(length(bad_gene_name) >= max(good_gene_exchange_index)){
bad_gene_name <- c(bad_gene_name[-good_gene_exchange_index],add_value)
bad_gene_name <- unique(bad_gene_name)
gene_index <- Getgene_index(bad_gene_name)
badbicluster$`gene index` <- gene_index
badbicluster$`gene names` <- bad_gene_name
return(badbicluster)
}
else{
remove_index <- sample(1:length(bad_gene_name),k)
bad_gene_name <- c(bad_gene_name[-remove_index],add_value)
bad_gene_name <- unique(bad_gene_name)
gene_index <- Getgene_index(bad_gene_name)
badbicluster$`gene index` <- gene_index
badbicluster$`gene names` <- bad_gene_name
return(badbicluster)
}
}
}
View(GABiclustering_gene_exchange)
ALL_B <- FindAllBiclusterings(Biclustering_num = 2, start = 1, delta = delta, All_gene_index = All_gene_index, All_cell_index = All_cell_index)
rm(all_corr)
rm(all_pvalue)
save.image("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FindALLBiclusterings_all.RData")
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FastFindALLBiclusterings_all.RData")
View(GABiclustering_gene_exchange)
GABiclustering_gene_exchange <- function(badbicluster = B[[2]], goodbicluster = B){
samp <- sample(length(goodbicluster),1)
goodbicluster <- goodbicluster[[samp]]
good_gene_name <- goodbicluster$`gene names`
bad_gene_name <- badbicluster$`gene names`
k <- 0
while (k == 0) {
k <- min(rpois(1, lambda = 1), min(nrow(good_gene_name), nrow(bad_gene_name)))
}
if(length(bad_gene_name) <= 3*k | length(good_gene_name) <= 3*k){
badbicluster <- GABiclustering_mutation(badbicluster)
return(badbicluster)
}
else{
good_gene_exchange_index <- sample(1:length(good_gene_name), k)
add_value <- good_gene_name[good_gene_exchange_index]
if(length(bad_gene_name) >= max(good_gene_exchange_index)){
bad_gene_name <- c(bad_gene_name[-good_gene_exchange_index],add_value)
bad_gene_name <- unique(bad_gene_name)
gene_index <- Getgene_index(bad_gene_name)
badbicluster$`gene index` <- gene_index
badbicluster$`gene names` <- bad_gene_name
return(badbicluster)
}
else{
remove_index <- sample(1:length(bad_gene_name),k)
bad_gene_name <- c(bad_gene_name[-remove_index],add_value)
bad_gene_name <- unique(bad_gene_name)
gene_index <- Getgene_index(bad_gene_name)
badbicluster$`gene index` <- gene_index
badbicluster$`gene names` <- bad_gene_name
return(badbicluster)
}
}
}
View(GABiclustering_gene_exchange)
View(GABiclustering_gene_exchange)
View(FindAllBiclusterings)
save.image("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FastFindALLBiclusterings_all.RData")
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FindALLBiclusterings_all.RData")
View(FindAllBiclusterings)
View(GABiclustering)
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FindALLBiclusterings_sim.RData")
View(FindAllBiclusterings)
View(GABiclustering)
View(drawBiclusterExpressed)
drawBiclusterExpressed(B)
CatCellFate(cell_index)
library(ggforce)
install.packages("ggforce")
library(ggforce)
install.packages("ggforce")
install.packages("ggforce")
library(ggforce)
install.packages("ggforce")
install.packages("ggforce")
install.packages("ggforce")
library(ggforce)
install.packages("ggforce")
library(ggforce)
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FindALLBiclusterings_sim.RData")
drawBiclusterExpressed(B)
CatCellFate(cell_index)
load("D:/博士期间研究学习材料/颜贤众/代码/小规模数据集双聚类结果/最终版本findall_fate1/All_gene_index_0.58_0.25_1_460_0.066_9.Rdata")
load("D:/博士期间研究学习材料/颜贤众/代码/小规模数据集双聚类结果/最终版本findall_fate1/All_cell_index_0.58_0.25_1_483_0.066_10.Rdata")
load("D:/博士期间研究学习材料/颜贤众/代码/小规模数据集双聚类结果/最终版本findall_fate1/All_B_0.58_0.25_1_483_0.066.Rdata")
load("D:/博士期间研究学习材料/颜贤众/代码/全部数据双聚类结果/All_B_0.35_0.15_0.6_888_0.04.Rdata")
load("D:/博士期间研究学习材料/颜贤众/代码/全部数据双聚类结果/All_B_0.35_0.15_0.6_408_0.04.Rdata")
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FindALLBiclusterings_all.RData")
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/workspace_new.RData")
drawBiclusterExpressed(bicluster = B)
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FindALLBiclusterings_all.RData")
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FindALLBiclusterings_sim.RData")
load("C:/Users/dell/Desktop/B_0.58_0.25_1_2021.Rdata")
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/workspace_new.RData")
load("C:/Users/dell/Desktop/B_0.58_0.25_1_2021.Rdata")
drawBiclusterExpressed()
drawBiclusterExpressed
View(drawBiclusterExpressed)
BB <-B[[1]]
drawBiclusterExpressed(BB)
drawBiclusterExpressed(bicluster = BB)
function(bicluster = B){
library(pheatmap)
colorName <- c("steelblue", 'tomato')
gene_index <- bicluster$`gene index`
Cell_names <- bicluster$`cell names`
bicluster_expressed <- Data_3[sort(gene_index), which(colnames(Data_3) %in% Cell_names)]
pheatmap(bicluster_expressed, cluster_rows = F, cluster_cols = F, color = colorName)
}
drawBiclusterExpressed(bicluster = BB)
BB
View(drawBiclusterExpressed)
drawBiclusterExpressed <- function(bicluster = B){
library(pheatmap)
colorName <- c("steelblue", 'tomato')
gene_index <- bicluster$`gene index`
Cell_names <- bicluster$`cell names`
bicluster_expressed <- Data_3[sort(gene_index), which(colnames(Data_3) %in% Cell_names)]
pheatmap(bicluster_expressed, cluster_rows = F, cluster_cols = F, color = colorName)
}
drawBiclusterExpressed(bicluster = BB)
drawBiclusterExpressed <- function(bicluster = B){
library(pheatmap)
colorName <- c(rgb(146,197,222, maxColorValue = 255), rgb(217,83,79, maxColorValue = 255))
gene_index <- bicluster[[1]]
Cell_names <- bicluster$`cell names`
bicluster_expressed <- Data_3[sort(gene_index),which(colnames(Data_3) %in% Cell_names)]
if(sum(bicluster_expressed) < length(gene_index) * length(Cell_names)){
pheatmap(bicluster_expressed, cluster_rows = F, cluster_cols = F, color = colorName, legend = F)
}
else{
pheatmap(bicluster_expressed, legend = F, cluster_rows = F, cluster_cols = F, color = colorName[2], breaks = 1)
}
}
drawBiclusterExpressed(bicluster = BB)
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/workspace_fate_simulation_new.RData")
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FindALLBiclusterings_all.RData")
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FindALLBiclusterings_all.RData")
drawBiclusterExpressed()
View(drawBiclusterExpressed)
load("D:/博士期间研究学习材料/颜贤众/代码/文件描述.txt")
load("D:/博士期间研究学习材料/颜贤众/代码/Rdata数据/FindALLBiclusterings_sim.RData")
plot(hclust_gene,hang = -1,labels = F)
pdf(file = 'hclust_gene', width = 17)
plot(hclust_gene,hang = -1,labels = F)
rect.hclust(hclust_gene,k=6)
dev.off()
View(hclust_class_gene_result)
hclust_gene_randindex <- NULL
for(i in 1:8){
cellClassFateIndexHu <- NULL
plotName <- paste('hclust_gene_class',i,sep = "_")
for(j in 1:length(cell_class[[i]])){
index <- which(cell_fate_original_hu[,1] == cell_class[[i]][[j]])
cellClassFateIndexHu <- append(cellClassFateIndexHu,index)
}
cell_class_data <- cellFateOriginalData[,cellClassFateIndexHu]
gene_class_dist <- dist(cell_class_data, method = 'binary')
hclust_class_gene <- hclust(gene_class_dist,method = "ward.D2")
hclust_class_gene_result <- cutree(hclust_class_gene,k=6)
hclust_gene_randindex <- append(hclust_gene_randindex,randIndex(table(hclust_gene_result,hclust_class_gene_result)))
pdf(file = plotName, width = 17)
plot(hclust_class_gene,hang = -1)
rect.hclust(hclust_class_gene,k=6)
dev.off()
}
library(readxl)
BiocManager::install("readxl")
install.packages("readxl")
install.packages("readxl")
